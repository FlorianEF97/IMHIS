"use strict";
(() => {
  const languageButtons = document.querySelectorAll(".lang-btn");
  const germanElements = document.querySelectorAll(".lang-de");
  const englishElements = document.querySelectorAll(".lang-en");
  const altElements = document.querySelectorAll("[data-alt-en]");
  const navToggle = document.querySelector(".nav-toggle");

  const updateToggleLabel = (isOpen) => {
    if (!navToggle) return;
    const suffix = document.documentElement.lang === "en" ? "En" : "De";
    const key = `label${isOpen ? "Close" : "Open"}${suffix}`;
    const label = navToggle.dataset[key];
    if (label) {
      navToggle.setAttribute("aria-label", label);
    }
  };

  const switchLanguage = (lang) => {
    if (!lang || document.documentElement.lang === lang) {
      return;
    }

    const isEnglish = lang === "en";
    document.documentElement.lang = lang;

    germanElements.forEach((element) => {
      element.hidden = isEnglish;
    });

    englishElements.forEach((element) => {
      element.hidden = !isEnglish;
    });

    languageButtons.forEach((button) => {
      button.setAttribute("aria-pressed", String(button.dataset.lang === lang));
    });

    updateToggleLabel(navToggle ? navToggle.classList.contains("open") : false);

    altElements.forEach((element) => {
      if (!element.dataset.altDe) {
        element.dataset.altDe = element.getAttribute("alt") || "";
      }
      const nextAlt = isEnglish ? element.dataset.altEn : element.dataset.altDe;
      if (typeof nextAlt === "string") {
        element.setAttribute("alt", nextAlt);
      }
    });

    try {
      localStorage.setItem("lang", lang);
    } catch (error) {
      // Ignore storage issues (e.g. private mode)
    }

    window.dispatchEvent(new Event("imhis-language-change"));
  };

  document.addEventListener(
    "click",
    (event) => {
      const target = event.target instanceof Element ? event.target : null;
      const button = target ? target.closest(".lang-btn") : null;
      if (button) {
        switchLanguage(button.dataset.lang);
      }
    },
    { passive: true }
  );

  const initialLanguage = (() => {
    try {
      const stored = localStorage.getItem("lang");
      if (stored === "de" || stored === "en") {
        return stored;
      }
    } catch (error) {
      // Ignore storage errors and fall back to navigator language
    }
    return navigator.language && navigator.language.startsWith("en") ? "en" : "de";
  })();

  switchLanguage(initialLanguage);
})();

(() => {
  const navToggle = document.querySelector(".nav-toggle");
  const navLinks = document.querySelector(".nav-links");
  if (!navToggle || !navLinks) {
    return;
  }

  const mediaQuery = window.matchMedia("(min-width: 768px)");
  let abortController;

  const updateToggleLabel = (isOpen) => {
    const suffix = document.documentElement.lang === "en" ? "En" : "De";
    const key = `label${isOpen ? "Close" : "Open"}${suffix}`;
    const label = navToggle.dataset[key];
    if (label) {
      navToggle.setAttribute("aria-label", label);
    }
  };

  const dispatchHeaderResize = () => {
    window.dispatchEvent(new Event("imhis-header-resize"));
  };

  const closeMenu = () => {
    navLinks.classList.remove("open");
    navLinks.hidden = !mediaQuery.matches;
    navToggle.classList.remove("open");
    navToggle.setAttribute("aria-expanded", "false");
    updateToggleLabel(false);
    if (abortController) {
      abortController.abort();
      abortController = undefined;
    }
    dispatchHeaderResize();
  };

  const handleOutsideClick = (event) => {
    const target = event.target instanceof Node ? event.target : null;
    if (target && (navLinks.contains(target) || navToggle.contains(target))) {
      return;
    }
    closeMenu();
  };

  const handleEscape = (event) => {
    if (event.key === "Escape") {
      closeMenu();
    }
  };

  const openMenu = () => {
    navLinks.hidden = false;
    navLinks.classList.add("open");
    navToggle.classList.add("open");
    navToggle.setAttribute("aria-expanded", "true");
    updateToggleLabel(true);
    abortController = new AbortController();
    document.addEventListener("click", handleOutsideClick, {
      signal: abortController.signal,
      passive: true,
    });
    document.addEventListener("keydown", handleEscape, {
      signal: abortController.signal,
    });
    dispatchHeaderResize();
  };

  const toggleMenu = () => {
    if (navLinks.classList.contains("open")) {
      closeMenu();
    } else {
      openMenu();
    }
  };

  const handleMediaChange = (event) => {
    if (event.matches) {
      navLinks.hidden = false;
    }
    closeMenu();
    navLinks.hidden = !event.matches;
  };

  mediaQuery.addEventListener("change", handleMediaChange);

  navToggle.addEventListener("click", toggleMenu);
  navLinks.addEventListener("click", (event) => {
    const target = event.target instanceof Element ? event.target : null;
    if (target && target.closest("a")) {
      closeMenu();
    }
  });

  window.addEventListener("imhis-language-change", () => {
    updateToggleLabel(navToggle.classList.contains("open"));
  });

  updateToggleLabel(false);
  navLinks.hidden = !mediaQuery.matches;
})();

(() => {
  const toggleButton = document.getElementById("toggle-sellers");
  const sellerList = document.getElementById("seller-list");
  if (!toggleButton || !sellerList) {
    return;
  }

  let abortController;

  const detachListeners = () => {
    if (abortController) {
      abortController.abort();
      abortController = undefined;
    }
  };

  const setListState = (isOpen) => {
    sellerList.classList.toggle("open", isOpen);
    sellerList.hidden = !isOpen;
    toggleButton.setAttribute("aria-expanded", String(isOpen));

    detachListeners();

    if (isOpen) {
      abortController = new AbortController();
      document.addEventListener("click", handleOutsideClick, {
        signal: abortController.signal,
        passive: true,
      });
      document.addEventListener("keydown", handleEscape, {
        signal: abortController.signal,
      });
    }
  };

  const handleOutsideClick = (event) => {
    const target = event.target instanceof Node ? event.target : null;
    if (target && (sellerList.contains(target) || toggleButton.contains(target))) {
      return;
    }
    setListState(false);
  };

  const handleEscape = (event) => {
    if (event.key === "Escape") {
      setListState(false);
    }
  };

  toggleButton.addEventListener("click", () => {
    const nextState = !sellerList.classList.contains("open");
    setListState(nextState);
  });

  setListState(sellerList.classList.contains("open"));
})();

(() => {
  const highlightIMHIS = (root) => {
    const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT);
    const nodes = [];

    while (walker.nextNode()) {
      const node = walker.currentNode;
      const parent = node.parentElement;
      if (!parent || parent.tagName === "SCRIPT" || parent.tagName === "STYLE" || parent.tagName === "STRONG") {
        continue;
      }
      if (node.nodeValue && node.nodeValue.includes("IMHIS")) {
        nodes.push(node);
      }
    }

    nodes.forEach((textNode) => {
      const parts = textNode.nodeValue ? textNode.nodeValue.split("IMHIS") : [];
      if (parts.length === 0) {
        return;
      }
      const fragment = document.createDocumentFragment();
      parts.forEach((part, index) => {
        if (part) {
          fragment.appendChild(document.createTextNode(part));
        }
        if (index < parts.length - 1) {
          const strong = document.createElement("strong");
          strong.textContent = "IMHIS";
          fragment.appendChild(strong);
        }
      });
      if (textNode.parentNode) {
        textNode.parentNode.replaceChild(fragment, textNode);
      }
    });
  };

  const run = () => {
    highlightIMHIS(document.body);
  };

  document.addEventListener("DOMContentLoaded", run);
  window.addEventListener("imhis-language-change", run);
})();

(() => {
  const docEl = document.documentElement;
  let frameId = 0;
  let lastHeight;

  const parseCssValue = (property, fallback) => {
    const value = parseFloat(getComputedStyle(docEl).getPropertyValue(property));
    return Number.isFinite(value) ? value : fallback;
  };

  const measureHeader = () => {
    const header = document.querySelector(".site-header") || document.querySelector("header");
    if (!header) {
      return;
    }
    const measured = Math.ceil(header.getBoundingClientRect().height);
    if (!measured) {
      return;
    }

    const min = parseCssValue("--nav-height-min", 56);
    const max = parseCssValue("--nav-height-max", 96);
    const clamped = Math.min(Math.max(measured, min), max);

    if (clamped !== lastHeight) {
      docEl.style.setProperty("--nav-height", `${clamped}px`);
      lastHeight = clamped;
    }
  };

  const scheduleMeasure = () => {
    if (frameId) {
      cancelAnimationFrame(frameId);
    }
    frameId = requestAnimationFrame(measureHeader);
  };

  window.addEventListener("resize", scheduleMeasure, { passive: true });
  window.addEventListener("load", scheduleMeasure);
  window.addEventListener("imhis-language-change", scheduleMeasure);
  window.addEventListener("imhis-header-resize", scheduleMeasure);

  document.addEventListener("DOMContentLoaded", () => {
    scheduleMeasure();
    const header = document.querySelector(".site-header") || document.querySelector("header");
    if (header && "ResizeObserver" in window) {
      const observer = new ResizeObserver(scheduleMeasure);
      observer.observe(header);
    }
  });

  scheduleMeasure();
})();
